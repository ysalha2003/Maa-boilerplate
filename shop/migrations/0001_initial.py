# Generated by Django 5.1.11 on 2025-07-13 21:15

import django.core.validators
import django.db.models.deletion
import shop.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ShopSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_notification', models.TextField(blank=True, help_text='Site-wide notification banner')),
                ('is_notification_active', models.BooleanField(default=False)),
                ('business_name', models.CharField(default='Alamana-jo', max_length=200)),
                ('business_description', models.TextField(default='Your trusted source for quality spare parts and maintenance services')),
                ('email', models.EmailField(default='alamanajo@gmail.com', max_length=254)),
                ('phone', models.CharField(default='+32 499 89 02 37', max_length=20)),
                ('address_line1', models.CharField(default='Quellinstraat 45', max_length=200)),
                ('address_line2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(default='Antwerpen', max_length=100)),
                ('postal_code', models.CharField(default='2018', max_length=20)),
                ('country', models.CharField(default='Belgium', max_length=100)),
                ('facebook_url', models.URLField(blank=True)),
                ('instagram_url', models.URLField(blank=True)),
                ('twitter_url', models.URLField(blank=True)),
                ('currency', models.CharField(default='EUR', max_length=3)),
                ('currency_symbol', models.CharField(default='â‚¬', max_length=5)),
                ('tax_rate', models.DecimalField(decimal_places=4, default=Decimal('0.2100'), help_text='VAT rate (e.g., 0.21 for 21%)', max_digits=5)),
                ('free_shipping_threshold', models.DecimalField(decimal_places=2, default=Decimal('100.00'), max_digits=10)),
                ('default_shipping_cost', models.DecimalField(decimal_places=2, default=Decimal('15.00'), max_digits=10)),
                ('maintenance_booking_enabled', models.BooleanField(default=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=20)),
            ],
            options={
                'verbose_name': 'Shop Settings',
                'verbose_name_plural': 'Shop Settings',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, db_index=True, max_length=40, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/', validators=[shop.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('sort_order', models.PositiveIntegerField(db_index=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['sort_order', 'name'],
                'indexes': [models.Index(fields=['is_active', 'sort_order'], name='shop_catego_is_acti_b15761_idx')],
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('subject', models.CharField(choices=[('general', 'General Inquiry'), ('order', 'Order Issue'), ('product', 'Product Question'), ('return', 'Return/Exchange'), ('maintenance', 'Maintenance Service'), ('parts', 'Parts Availability'), ('quote', 'Request Quote'), ('complaint', 'Complaint'), ('suggestion', 'Suggestion'), ('other', 'Other')], max_length=20)),
                ('order_number', models.CharField(blank=True, help_text='If related to an order', max_length=20)),
                ('message', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], db_index=True, default='normal', max_length=10)),
                ('status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], db_index=True, default='new', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_contacts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MaintenanceQuote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('vehicle_type', models.CharField(choices=[('bike', 'Traditional Bike'), ('e_bike', 'E-Bike'), ('e_scooter', 'E-Scooter')], max_length=20)),
                ('vehicle_brand', models.CharField(max_length=100)),
                ('vehicle_model', models.CharField(blank=True, max_length=100)),
                ('purchase_year', models.PositiveIntegerField(blank=True, null=True)),
                ('problem_description', models.TextField()),
                ('urgency', models.CharField(choices=[('low', 'Not Urgent'), ('medium', 'Moderate'), ('high', 'Urgent'), ('emergency', 'Emergency')], db_index=True, default='medium', max_length=10)),
                ('preferred_contact_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('both', 'Both Email and Phone')], default='email', max_length=20)),
                ('service_location', models.CharField(choices=[('shop', 'Bring to Shop'), ('pickup', 'Pickup Service'), ('onsite', 'On-site Service')], default='shop', max_length=20)),
                ('customer_address', models.TextField(blank=True, help_text='Required for pickup/on-site service')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewed', 'Under Review'), ('quoted', 'Quote Sent'), ('accepted', 'Quote Accepted'), ('in_progress', 'Service In Progress'), ('completed', 'Service Completed'), ('cancelled', 'Cancelled'), ('expired', 'Quote Expired')], db_index=True, default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('quoted_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('quote_notes', models.TextField(blank=True)),
                ('estimated_completion', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quoted_at', models.DateTimeField(blank=True, null=True)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_quotes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Maintenance Quote',
                'verbose_name_plural': 'Maintenance Quotes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MaintenancePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=shop.models.maintenance_photo_path, validators=[shop.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('comment', models.CharField(blank=True, max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('quote', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='shop.maintenancequote')),
            ],
            options={
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(db_index=True, editable=False, max_length=20, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Payment'), ('paid', 'Paid'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], db_index=True, default='pending', max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('shipping_address_line1', models.CharField(max_length=200)),
                ('shipping_address_line2', models.CharField(blank=True, max_length=200)),
                ('shipping_city', models.CharField(max_length=100)),
                ('shipping_state', models.CharField(max_length=100)),
                ('shipping_postal_code', models.CharField(max_length=20)),
                ('shipping_country', models.CharField(default='Belgium', max_length=100)),
                ('billing_same_as_shipping', models.BooleanField(default=True)),
                ('billing_address_line1', models.CharField(blank=True, max_length=200)),
                ('billing_address_line2', models.CharField(blank=True, max_length=200)),
                ('billing_city', models.CharField(blank=True, max_length=100)),
                ('billing_state', models.CharField(blank=True, max_length=100)),
                ('billing_postal_code', models.CharField(blank=True, max_length=20)),
                ('billing_country', models.CharField(blank=True, max_length=100)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(blank=True, max_length=50)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], db_index=True, default='pending', max_length=20)),
                ('payment_intent_id', models.CharField(blank=True, max_length=200)),
                ('transaction_id', models.CharField(blank=True, max_length=200)),
                ('tracking_number', models.CharField(blank=True, max_length=100)),
                ('tracking_url', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('shipped_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(help_text='Brief product summary for cards and listings', max_length=300)),
                ('product_type', models.CharField(choices=[('brake_parts', 'Brake Parts'), ('drive_train', 'Drive Train'), ('wheels_tires', 'Wheels & Tires'), ('lighting', 'Lighting'), ('batteries', 'Batteries & Charging'), ('electronics', 'Electronics'), ('frame_parts', 'Frame Parts'), ('handlebars', 'Handlebars & Grips'), ('saddles', 'Saddles & Seatposts'), ('tools', 'Tools & Maintenance'), ('safety', 'Safety & Protection'), ('accessories', 'Accessories')], db_index=True, default='accessories', max_length=20)),
                ('vehicle_compatibility', models.CharField(choices=[('bike', 'Traditional Bike'), ('e_bike', 'E-Bike'), ('e_scooter', 'E-Scooter'), ('universal', 'Universal')], db_index=True, default='universal', max_length=20)),
                ('brand', models.CharField(db_index=True, max_length=100)),
                ('model_number', models.CharField(blank=True, help_text='Manufacturer model number', max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('compare_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original price for sale display', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost for margin calculation', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('stock_quantity', models.PositiveIntegerField(db_index=True, default=0)),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, help_text='Alert when stock falls below this number')),
                ('availability_status', models.CharField(choices=[('in_stock', 'In Stock'), ('low_stock', 'Low Stock'), ('out_of_stock', 'Out of Stock'), ('pre_order', 'Pre-Order')], db_index=True, default='in_stock', max_length=20)),
                ('sku', models.CharField(db_index=True, help_text='Stock Keeping Unit', max_length=50, unique=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=1, help_text='Weight in grams', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.1'))])),
                ('dimensions', models.CharField(blank=True, help_text='L x W x H in mm', max_length=100)),
                ('material', models.CharField(blank=True, help_text='Primary material', max_length=100)),
                ('color', models.CharField(blank=True, max_length=50)),
                ('compatibility_notes', models.TextField(blank=True, help_text='Compatible models/brands')),
                ('meta_title', models.CharField(blank=True, max_length=160)),
                ('meta_description', models.CharField(blank=True, max_length=300)),
                ('is_featured', models.BooleanField(db_index=True, default=False)),
                ('is_bestseller', models.BooleanField(db_index=True, default=False)),
                ('is_new_arrival', models.BooleanField(db_index=True, default=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='shop.category')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('product_name', models.CharField(max_length=200)),
                ('product_sku', models.CharField(max_length=50)),
                ('product_brand', models.CharField(max_length=100)),
                ('product_model', models.CharField(blank=True, max_length=100)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='shop.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shop.product')),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)])),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='shop.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=shop.models.product_image_path, validators=[shop.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('alt_text', models.CharField(help_text='Alt text for accessibility and SEO', max_length=200)),
                ('is_primary', models.BooleanField(db_index=True, default=False)),
                ('sort_order', models.PositiveIntegerField(db_index=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='shop.product')),
            ],
            options={
                'ordering': ['sort_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductSpecification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Thread Size', max_length=100)),
                ('value', models.CharField(help_text='e.g., M6 x 1.0', max_length=200)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specifications', to='shop.product')),
            ],
            options={
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('is_verified_purchase', models.BooleanField(db_index=True, default=False)),
                ('is_approved', models.BooleanField(db_index=True, default=True)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='shop.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BusinessHour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], unique=True)),
                ('open_time', models.TimeField(blank=True, null=True)),
                ('close_time', models.TimeField(blank=True, null=True)),
                ('is_closed', models.BooleanField(default=False)),
                ('break_start', models.TimeField(blank=True, help_text='Lunch break start', null=True)),
                ('break_end', models.TimeField(blank=True, help_text='Lunch break end', null=True)),
                ('setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business_hours', to='shop.shopsetting')),
            ],
            options={
                'ordering': ['weekday'],
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['user'], name='shop_cart_user_id_696d22_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['session_key'], name='shop_cart_session_e92239_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['updated_at'], name='shop_cart_updated_b4c123_idx'),
        ),
        migrations.AddIndex(
            model_name='contactmessage',
            index=models.Index(fields=['status', '-created_at'], name='shop_contac_status_1cabaa_idx'),
        ),
        migrations.AddIndex(
            model_name='contactmessage',
            index=models.Index(fields=['priority', '-created_at'], name='shop_contac_priorit_e43539_idx'),
        ),
        migrations.AddIndex(
            model_name='contactmessage',
            index=models.Index(fields=['assigned_to', '-created_at'], name='shop_contac_assigne_3bd127_idx'),
        ),
        migrations.AddIndex(
            model_name='maintenancequote',
            index=models.Index(fields=['user', '-created_at'], name='shop_mainte_user_id_dcefdb_idx'),
        ),
        migrations.AddIndex(
            model_name='maintenancequote',
            index=models.Index(fields=['status', '-created_at'], name='shop_mainte_status_521f46_idx'),
        ),
        migrations.AddIndex(
            model_name='maintenancequote',
            index=models.Index(fields=['urgency', '-created_at'], name='shop_mainte_urgency_cbcd1c_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user', '-created_at'], name='shop_order_user_id_f8b1c9_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status', '-created_at'], name='shop_order_status_65feda_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['payment_status'], name='shop_order_payment_201933_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_type', 'is_active'], name='shop_produc_product_579923_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'is_active'], name='shop_produc_categor_6c2d8c_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['vehicle_compatibility', 'is_active'], name='shop_produc_vehicle_fd7020_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_featured', 'is_active'], name='shop_produc_is_feat_a70478_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['brand', 'is_active'], name='shop_produc_brand_1fcf96_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['price', 'is_active'], name='shop_produc_price_b796be_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order', 'product'], name='shop_orderi_order_i_d3fcce_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['cart', 'updated_at'], name='shop_cartit_cart_id_eafead_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('cart', 'product')},
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'is_primary'], name='shop_produc_product_58a9da_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productspecification',
            unique_together={('product', 'name')},
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['product', 'is_approved'], name='shop_review_product_ae89ba_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['user', '-created_at'], name='shop_review_user_id_6a0a0d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('product', 'user')},
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['user', '-created_at'], name='shop_wishli_user_id_2f14d3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='wishlist',
            unique_together={('user', 'product')},
        ),
    ]
